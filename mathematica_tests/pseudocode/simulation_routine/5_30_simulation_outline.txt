//I think I accidentally reversed the standard 
//c++ _ vs. camelCase choice here... whoops

//includes 
#include <all relevant CGAL>
#include <iostream>

//class definition -- usually in another file, but one big plan means one big file
//that said, pretend function implementations are in the appropriate other file :) 
class Simulation {
  private:
    Mesh underlying_mesh;
    double[] baryPositions;
  public:
    //the following three could be in one big updatePositions function
    //called with no argument and returning void, but I want granularity
    void generateForces(energy_function);
    void generateDisplacements(forces);
    void updatePositions(dr);
    void outputBarycentricPositions();
    void outputXYZPositions();
    void convertToBary();
    void convertToXYZ();
}


//function definitions
void getFile() {
  str meshLocation;
  cout << "input path to pre-generated mesh: " << endl;
  if (!(cin >> meshLocation)) {
    cout << "Please only input string file locations. << endl;
  }
  return meshLocation;
}

Mesh loadMesh("myfilelocation") {
    loaded_mesh = load("myfilelocation")
    return loaded_mesh;
}

double[] initializeParticles(heightfxn, int n_particles, 
                    OPTIONAL double[] particle_locations) {
  //realistically, i probably just overload this to take two different arguments
  //and either just return the given particle locations or generate new ones

  //separate question: can I take a function as input to another function?
  //how would I get that from the user? 
  
  if(particle_locations) {
    return particle_locations;
  }
  else {
    double[] particle_locations;
    particle_locations = getRandomPositions(n_particles,heightFxn);
  }
  return particle_locations;
}

//main function
int main() {
  meshLocation = getFile();
  underlying_mesh = loadMesh(meshLocaton);
  {heightFxn, nParticles} = getHeightandNumberOfParticles();
  n_timesteps = getTimesteps();
  xyz_locations = initializeParticles(heightfxn, nParticles);
  Simulation sim = Simulation(xyz_locations, underlying_mesh);

  //main simulation loop
  int i = 0;
  std::vector positionLog; \\I'm not sure how to write lists of lists in c++

  while (i <= n_timesteps) {
    //I could wrap this all in one "do a step" function
    positionLog.push_back(sim.outputXYZPositions());
    forces = sim.generateForces(energy_function); //implicit that we find distances/paths 
    //above is easily the biggest function in this entire file
    shifts = sim.generateDisplacements(forces,sim.outputXYZPositions);
    sim.updatePositions(shifts);
    //and the updatePositions function is easily the second biggest
    //because of all possible edge cases... pun intended
  }
  write(positionLog); //write to system so we can visualize elsewhere
                      //or within CGAL itself
  return 0;
}
